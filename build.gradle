plugins {
    id 'org.springframework.boot' version '2.4.13'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
    id "org.sonarqube" version "6.0.1.5171"
    id("io.freefair.lombok") version "8.13.1"
}

group 'ch.uzh.ifi.hasel'
version '1.0.0'
java{
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

springBoot {
    mainClass.set('ch.uzh.ifi.hase.soprafs24.Application')
}

dependencies {
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'com.google.api-client:google-api-client:2.0.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.apis:google-api-services-calendar:v3-rev20220715-2.0.0'
    
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql:42.2.18'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'    
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

sonar {
    properties {
        property "sonar.projectKey", "Lunoastro_sopra-f25-group-07-server"
        property "sonar.organization", "lunoastro"
        property "sonar.host.url", "https://sonarcloud.io"

    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks = 1
}
tasks.named('sonar').configure {
    dependsOn jacocoTestReport
}
sonar {
  properties {
    property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  }
}
File secretPropsFile = file('./local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
}
tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorPath = configurations.annotationProcessor
}
task bootRunDev {
    group = 'application'
    description = 'Run in dev profile'
    doFirst {
        bootRun.systemProperty 'spring.profiles.active', 'dev'
    }
    finalizedBy bootRun
}

bootRun {
    // Set prod as the default profile for bootRun
    systemProperty "spring.profiles.active", "prod"
    
    // Allow overriding via command line
    if (project.hasProperty('profile')) {
        systemProperty "spring.profiles.active", project.getProperty('profile')
        systemProperty 'spring.devtools.add-properties', 'true'
    }else{
        systemProperty 'spring.devtools.add-properties', 'false'
    }
}
defaultTasks 'bootJar', 'build'
